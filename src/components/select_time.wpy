// 选择倒计时时间模块
<style lang="less">
    .select-time{
        .num{
            font-size: 100rpx;
        }

    }
</style>

<template>
    <view class="flex-around w-percent100 h-percent100 select-time">
        <picker mode="multiSelector" bindchange="changeTime" value="{{selectTimeIndex}}" range="{{selectTimeArray}}" disabled="{{!hasTimeConfirmBtn}}">
            <view class="flex-center num cec2c98">
                {{time}}
            </view>
        </picker>
        <block wx:if="{{hasTimeConfirmBtn}}">
            <view class="flex-center">
                <image style="width:{{98*px2rpxWidth}}px;height:{{98*px2rpxWidth}}px;"
                       lazy-load="true"
                       @tap.stop="confirmSelectTime"
                       src="{{confirm_btn}}">
                </image>
            </view>
        </block>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import imgApi from '@/utils/imgApi';
    import util from '@/utils/util';
    import tip from '@/utils/tip';
    import {PX_TO_RPX} from '@/utils/constant'

    let clear_set = null;


    export default class SelectTime extends wepy.component {

        data = {
            px2rpxWidth:0,
            px2rpxHeight:0,
            confirm_btn:imgApi.confirm_btn,
            // 选择时间的数据
            selectTimeArray:[],
            // 选择时间的下标
            selectTimeIndex:[0,0,0],
        };

        props = {
            // 倒计时确定按钮是否隐藏 true不隐藏/false隐藏
            hasTimeConfirmBtn:{
                twoWay:true,
            },
            // 倒计时开始(true开始)
            countdownStart:{
                twoWay:true,
            },
            // 倒计时结束(true结束)
            countdownOver:{
                twoWay:true,
            },
            // 选择时间
            time:{
                twoWay:true,
            }
        };

        onLoad(){
            // 获取尺寸适配
            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;

            // 时分秒范围数组
            let hour = util.arrRange(0,12,true);
            let minute = util.arrRange(0,59,true);
            let second = minute;
            this.selectTimeArray = [hour,minute,second];
            this.$apply();
        };

        methods = {
            // 选择倒计时时间
            changeTime(e){
                this.selectTimeIndex = e.detail.value;
                this.time = this.selectTimeArray[0][this.selectTimeIndex[0]] + ':' + this.selectTimeArray[1][this.selectTimeIndex[1]] +':' + this.selectTimeArray[2][this.selectTimeIndex[2]];
                // console.log(this.time);
                this.$apply();
            },

            // 确定倒计时时间
            confirmSelectTime(){
                if(!this.confirmSelectTimeE()){
                    return;
                }
                this.time = this.selectTimeArray[0][this.selectTimeIndex[0]] + ':' + this.selectTimeArray[1][this.selectTimeIndex[1]] +':' + this.selectTimeArray[2][this.selectTimeIndex[2]];
                this.hasTimeConfirmBtn = false;
                this.$apply();

                // PK_model_master用
                this.$emit('confirmTimeEvents');
            },
        };

        // 倒计时
        countDown(){
            let that = this;
            clear_set = setInterval(function() {
                that.$emit('sendNumber');
                let newTime = util.timeToSecond(that.time);
                if(newTime <= 0){
                    clearInterval(clear_set);
                    that.stopCountDownE(true);
                    return;
                }
                that.time = util.SecondFormat(newTime - 1, 'hh:mm:ss');
                that.$apply();
            },1000);
        };

        events = {
            //停止倒计时
            stopCountDown(){
                this.stopCountDownE(true);
            },

            // 强制停止倒计时
            forcedStopCountdown(){
                this.stopCountDownE(false);
            }
        };


        watch = {
            // 倒计时开始
            countdownStart(newValue){
                if(newValue){
                    this.countDown();
                }
            },
        };

        // 确定时间
        confirmSelectTimeE(){
            if(this.selectTimeIndex[0] <= 0 && this.selectTimeIndex[1] <= 0 && this.selectTimeIndex[2] <= 0){
                tip.alert('请选择时间');
                return false;
            } else {
                return true;
            }
        }


        // 倒计时结束
        stopCountDownE(flag){
            clearInterval(clear_set);
            this.selectTimeIndex = [0,0,0];
            this.time = '00:00:00';
            this.countdownStart = false;
            this.countdownOver = flag;
            this.hasTimeConfirmBtn = true;
            this.$apply();
        }

    }
</script>
