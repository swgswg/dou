// components--游戏页面
<style lang="less">
    .game-components{
        .f200{
            font-size: 200rpx;
            font-weight: bolder;
        }
    }
</style>

<template>
    <view class="pr flex-column bg-repeat-size game-components"
          style="width:{{widWidth}}px;height:{{widHeight}}px;background-image: url({{bgImg}});">

        <!--退出按钮 start-->
        <view class="pa" style="top:{{35*px2rpxHeight}}px;right:{{35*px2rpxWidth}}px;">
            <outmodel></outmodel>
        </view>
        <!--退出按钮 end-->

        <!--准备/开始按钮 start-->
        <block wx:if="{{(!isCountDownNum) && (!isDot)}}">
            <view class="flex-center w-percent100" style="margin-top:{{250*px2rpxHeight}}px;">
                <image src="{{readyOrStartBtn}}"
                       lazy-load='true'
                       style="width:{{307*px2rpxWidth}}px;height:{{132*px2rpxWidth}}px;"
                       @tap.stop="readyOrStartTap">
                </image>
            </view>
        </block>
        <!--准备/开始按钮 end-->

        <!--3/2/1倒计时 start-->
        <block wx:if="{{isCountDownNum}}">
            <view class="flex-center w-percent100" style="margin-top:{{80*px2rpxHeight}}px;">
                <view class="flex-center f200 cf bg-repeat-size"
                      style="width:{{460*px2rpxWidth}}px;height:{{460*px2rpxWidth}}px;background-image:url({{NumBg}})">
                    <veiw class="flex-center w-percent100 h-percent100">{{countDownNum}}</veiw>
                </view>
            </view>
        </block>
        <!--3/2/1倒计时 end-->

        <!--点击按钮 start-->
        <block wx:if="{{isDot}}">
            <view class="flex-center w-percent100" style="margin-top:{{200*px2rpxHeight}}px;">
                <touch :ratio.sync="ratio" :imgType.sync="imgType"></touch>
            </view>
        </block>
        <!--点击按钮 end-->

        <!--舞台/人物定位 start-->
        <view class="pa flex-center w-percent100" style="bottom:{{200*px2rpxHeight}}px;left:0;">
            <threestage
                    :stageDataLeft.sync="stageDataLeft"
                    :stageDataCenter.sync="stageDataCenter"
                    :stageDataRight.sync="stageDataRight"
            >
            </threestage>
        </view>
        <!--舞台/人物定位 end-->

        <!--选择时间 start-->
        <view class="pa flex-center w-percent100"
              style="bottom:{{40*px2rpxHeight}}px;left:0;height:{{120*px2rpxWidth}}px;">
            <selecttime :countdownStart.sync="countdownStart"
                        :hasTimeConfirmBtn.sync="hasTimeConfirmBtn"
                        :countdownOver.sync="countdownOver"
                        :time.sync="time">
            </selecttime>
        </view>
        <!--选择时间 end-->

        <!--遮盖层 start-->
        <view wx:if="{{showCoverLayer}}">
            <coverlayer>

                <!--游戏结束排名 start-->
                <view class="flex-center w-percent100" slot="content" wx:if="{{showGameRank}}">
                    <gamerank :ratio.sync="gameRankRatio"></gamerank>
                </view>
                <!--游戏结束排名 end-->

            </coverlayer>
        </view>
        <!--遮盖层 end-->

    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX,USER_INFO,GAME_USER } from '@/utils/constant';
    import imgApi from '@/utils/imgApi';
    import api from '@/utils/api';
    import util from '@/utils/util';
    import tip from '@/utils/tip';
    import socketServer from '@/utils/socketServer';

    import OutModel from '@/components/out_model';
    import Touch from '@/components/touch';
    import ThreeStage from '@/components/three_stage';
    import SelectTime from '@/components/select_time';
    import GameRank from '@/components/game_rank';
    import CoverLayer from '@/components/common/cover_layer';

    let userInfo = null;
    let shakeHandNumber = 0;
    let clear_set = null;
    let clear_set2 = null;
    let gameUser = null;
    let gameTime = null;
    let degree = 0;

    export default class Game extends wepy.component {
        components = {
            outmodel: OutModel,
            touch:Touch,
            selecttime:SelectTime,
            threestage:ThreeStage,
            gamerank:GameRank,
            coverlayer:CoverLayer
        };

        data = {
            widWidth:0,
            widHeight:0,
            px2rpxWidth:0,
            px2rpxHeight:0,
            bgImg: imgApi.pk_model_bg,

            // 点击按钮是否显示
            isDot:false,

            // 点击按钮参数
            ratio:0.8,
            imgType:1,

            // 倒计时开始(true开始)
            countdownStart:false,

            // 倒计时结束(true结束/false没有结束)
            countdownOver:false,

            // 3/2/1倒计时
            NumBg:imgApi.count_down,
            // 是否显示3/2/1倒计时(true显示/false不显示)
            isCountDownNum:false,
            countDownNum:3,

            // 是否显示遮盖层
            showCoverLayer:false,
            // 游戏结束排名是否显示
            showGameRank:false,
            gameRankRatio:1,
        };

        props = {
            roomId:{},
            legOrHand:{},

            // 房主开始按钮/组员准备按钮
            readyOrStartBtn:{
                twoWay:true,
            },

            stageDataLeft:{
                twoWay:true,
            },
            stageDataCenter:{
                twoWay:true,
            },

            stageDataRight:{
                twoWay:true,
            },

            // 选择时间确定按钮(房主有确定按钮/组员没有)
            hasTimeConfirmBtn:{
                twoWay:true,
            },

            // 倒计时时间
            time:{
                default:'00:00:00',
                twoWay:true,
            },

            // 开始倒计时
            countdownStart:{
                twoWay:true,
            }
        };

        onLoad(){
            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.widWidth = px2rpx.originalWidth;
            this.widHeight = px2rpx.originalHeight;
            this.$apply();

            // 把自己的信息绑定到中间舞台
            this.updateStageDataCenter();
        };

        watch = {
            // 倒计时结束
            countdownOver(newValue){
                console.log('countdownOver========');
                console.log(newValue);
                if(newValue){
                    this.isOverCountDown(true);
                }
            },

        };

        methods = {
            // 房主开始/组员准备按钮
            readyOrStartTap(){
                this.$emit('readyOrStartE');
            },

            // 房主退出
            masterOutM(){
                this.isOverCountDown(false);
                // 关闭websocket
                // setTimeout(function() {
                //     socketServer.wsClose();
                // },2000);
                // 退出游戏
                // this.cancelHeartbeatE();
            }
        };

        events = {
            // 开始倒计时
            countDownNum321Events(){
                this.countDownNum321();
            },

            // 点击事件
            clickEvents(){
                // 手抖
                if( (this.legOrHand == 0) && (!this.hasTimeConfirmBtn) ){
                    ++shakeHandNumber;
                    this.stageDataCenter.shakeHandNum = shakeHandNumber;
                    this.$apply();
                    // 发送websocket
                    this.sendWSNumE(shakeHandNumber);
                }
            },

            // 退出事件
            outEvents(){
                this.countdownOver = false;
                this.$apply();
                this.isOverCountDown(false);
                // 退出游戏
                this.updateRoomUserStatusE();
                // this.cancelHeartbeatE();
            },

            // 取消遮盖层
            cancelShow(){
                this.cancelCoverlayer();
            },

            // 断开重连获取信息
            disconnectAndReconnectEvents(){
                this.disconnectAndReconnect();
            },

            // 增加心跳,保持长连接50秒发一次
            heartbeatEvents(){
                this.heartbeatE();
            },

            // 连接意外关闭取消心跳
            cancelHeartbeatEvents(){
                this.cancelHeartbeatE();
            }
        };

        // 完善自己的舞台信息
        updateStageDataCenter(){
            // 把自己的信息绑定到中间舞台
            userInfo = wepy.getStorageSync(USER_INFO);
            this.stageDataCenter.userId = userInfo.id;
            this.stageDataCenter.logo = userInfo.logo;
            this.stageDataCenter.photo = userInfo.photo;
            this.stageDataCenter.shakeHandNum = userInfo.name;
            this.stageDataCenter.roomId = this.roomId;
            this.stageDataCenter.legOrHand = this.legOrHand;

            this.stageDataLeft.roomId = this.roomId;
            this.stageDataLeft.legOrHand = this.legOrHand;

            this.stageDataRight.roomId = this.roomId;
            this.stageDataRight.legOrHand = this.legOrHand;

            this.$apply();
        }

        // 3/2/1倒计时
        countDownNum321(){
            let that =this;
            // 发送websocket
            this.isCountDownNum = true;
            clear_set = setInterval(function() {
                that.countDownNum--;
                that.$apply();
                if(that.countDownNum === 0){
                    clearInterval(clear_set);
                    that.startE();
                }
            },1000);
        }

        // 开始
        startE(){
            ++degree;
            gameTime = this.time;
            this.isCountDownNum = false;
            this.countdownStart = true;
            this.countdownOver = false;
            this.isDot = true;
            this.stageDataCenter.shakeHandNum = 0;
            this.stageDataLeft.shakeHandNum = 0;
            this.stageDataRight.shakeHandNum = 0;
            this.$apply();
        }

        // 倒计时完成
        isOverCountDown(flag){
            // 添加游戏记录
            clearInterval(clear_set);
            this.countDownNum = 3;
            this.isCountDownNum = false;
            this.countdownStart = false;
            this.countdownOver = false;
            this.isDot = false;
            this.$emit('isOverCountDownEvents');
            this.$apply();
            // flag=true正常倒计时结束游戏/false中途退出
            if(flag){
                this.addGameRecord();
                this.gameRankE();
            } else {
                shakeHandNumber = 0;
                this.$broadcast('forcedStopCountdown');
            }
        }

        // 统计游戏排名
        gameRankE(){
            let roomId = this.roomId;
            let that = this;
            wx.showToast({
                title: '统计排名中',
                icon: 'loading',
                mask: true,
            });
            setTimeout(async function() {
                let res = await api.getUserPKRanking({
                    query:{
                        roomId: roomId,
                        degree: degree,
                    }
                });
                // console.log('统计游戏排名=========');
                // console.log(res.data.data);
                let ranking = res.data.data;
                ranking.forEach(function(item) {
                    if(item.userId == that.stageDataLeft.userId){
                        that.stageDataLeft.shakeHandNum = item.shakeNum;
                    } else if(item.userId == that.stageDataCenter.userId){
                        that.stageDataCenter.shakeHandNum = item.shakeNum;
                    } else if(item.userId == that.stageDataRight.userId){
                        that.stageDataRight.shakeHandNum = item.shakeNum;
                    }
                });
                that.stageDataCenter.shakeHandNum = res.data.data;
                that.$invoke('gamerank','display',res.data.data);
                that.showGameRankE();
                shakeHandNumber = 0;
            },2000);
        }

        // 显示游戏排名
        showGameRankE(){
            this.showCoverLayer = true;
            this.showGameRank = true;
            this.$apply();
        }

        // 取消遮盖层
        cancelCoverlayer(){
            this.showCoverLayer = false;
            this.showGameRank = false;
            this.$apply();
        }

        // 添加游戏记录
        async addGameRecord(){
            let that = this;
            await api.addRecord({
                query:{
                    userId: userInfo.id,
                    time: gameTime,
                    shakeNum: shakeHandNumber,
                    // 0（自己）1（好友对战）
                    type: 1,
                    // 0（手动）1（脚动）
                    roomId: that.roomId,
                    // 游戏对战次数
                    degree: degree,
                    status: that.legOrHand,
                    mode:api.PKModel,
                }
            });
            shakeHandNumber = 0;
        }

        // 退出游戏
        async updateRoomUserStatusE(){
            let roomId = this.roomId;
            api.updateRoomUserStatus({
                query:{
                    userId: userInfo.id,
                    roomId: roomId,
                }
            });
            shakeHandNumber = 0;
        }

        // 发送点击数
        sendWSNumE(number){
            if(util.isEmpty(gameUser)){
                gameUser = wepy.getStorageSync(GAME_USER);
            }
            let gameUserIdArr = [];
            // console.log(gameUser);
            gameUser.forEach(function(item) {
                if(item.userId != userInfo.id){
                    gameUserIdArr.push(item.userId);
                }
            });
            // console.log(gameUserIdArr);
            gameUserIdArr.forEach(function(item) {
                socketServer.wsSend(item, [{userId: userInfo.id, num: number}, {type:6}]);
            });
        }

        /**
         *  断开重连
         * @param roomId
         */
        async disconnectAndReconnect(){
            let roomId = this.roomId;
            console.log('断开重连==================');
            await api.getRoomUserData({
                query:{
                    roomId:roomId
                }
            });
        }


        // 增加心跳,保持长连接50秒发一次
        heartbeatE(){
            let roomId = this.roomId;
            clear_set2 = setInterval(function() {
                socketServer.wsSend(roomId, '心跳测试');
            },50000);
        }

        // 连接意外关闭取消心跳
        cancelHeartbeatE(){
            clearInterval(clear_set2);
        }
    }
</script>

