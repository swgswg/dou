// components--游戏页面
<style lang="less">
    .game-components{
        .f150{
            font-size: 200rpx;
            font-weight: bolder;
        }
    }
</style>

<template>
    <view class="pr flex-column bg-repeat-size game-components"
          style="width:{{widWidth}}px;height:{{widHeight}}px;background-image: url({{bgImg}});">

        <!--退出按钮 start-->
        <view class="pa" style="top:{{35*px2rpxHeight}}px;right:{{35*px2rpxWidth}}px;">
            <outmodel></outmodel>
        </view>
        <!--退出按钮 end-->

        <!--准备/开始按钮 start-->
        <block wx:if="{{(!isCountDownNum) && (!isDot)}}">
            <view class="flex-center w-percent100" style="margin-top:{{250*px2rpxHeight}}px;">
                <image src="{{readyOrStartBtn}}"
                       style="width:{{307*px2rpxWidth}}px;height:{{132*px2rpxWidth}}px;"
                       @tap.stop="readyOrStartTap">
                </image>
            </view>
        </block>
        <!--准备/开始按钮 end-->

        <!--3/2/1倒计时 start-->
        <block wx:if="{{isCountDownNum}}">
            <view class="flex-center w-percent100" style="margin-top:{{80*px2rpxHeight}}px;">
                <view class="flex-center cf bg-repeat-size f150"
                      style="width:{{463*px2rpxWidth}}px;height:{{481*px2rpxWidth}}px;background-image:url({{NumBg}})">
                    {{countDownNum}}
                </view>
            </view>
        </block>
        <!--3/2/1倒计时 end-->

        <!--点击按钮 start-->
        <block wx:if="{{isDot}}">
            <view class="flex-center w-percent100" style="margin-top:{{200*px2rpxHeight}}px;">
                <touch :ratio.sync="ratio" :imgType.sync="imgType"></touch>
            </view>
        </block>
        <!--点击按钮 end-->

        <!--舞台/人物定位 start-->
        <view class="pa flex-center w-percent100" style="bottom:{{200*px2rpxHeight}}px;left:0;">
            <threestage
                    :stageDataLeft.sync="stageDataLeft" :numLeft.sync="numLeft"
                    :stageDataCenter.sync="stageDataCenter" :numCenter.sync="numCenter"
                    :stageDataRight.sync="stageDataRight" :numRight.sync="numRight"
            >
            </threestage>
        </view>
        <!--舞台/人物定位 end-->

        <!--选择时间 start-->
        <view class="pa flex-center w-percent100"
              style="bottom:{{40*px2rpxHeight}}px;left:0;height:{{120*px2rpxWidth}}px;">
            <selecttime :countdownStart.sync="countdownStart"
                        :hasTimeConfirmBtn.sync="hasTimeConfirmBtn"
                        :selectTimeIndex.sync="selectTimeIndex"
                        :countdownOver.sync="countdownOver"
                        :time.sync="time">
            </selecttime>
        </view>
        <!--选择时间 end-->

        <!--遮盖层 start-->
        <view wx:if="{{showCoverLayer}}">
            <coverlayer>

                <!--游戏结束排名 start-->
                <view class="flex-center w-percent100" slot="content" wx:if="{{showGameRank}}">
                    <gamerank :ratio.sync="gameRankRatio"></gamerank>
                </view>
                <!--游戏结束排名 end-->

            </coverlayer>
        </view>
        <!--遮盖层 end-->

    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX,USER_INFO } from '@/utils/constant';
    import imgApi from '@/utils/imgApi';
    import api from '@/utils/api';
    import tip from '@/utils/tip';
    import weixin from '@/utils/weixin';
    import OutModel from '@/components/out_model';
    import Touch from '@/components/touch';
    import ThreeStage from '@/components/three_stage';
    import SelectTime from '@/components/select_time';
    import GameRank from '@/components/game_rank';
    import CoverLayer from '@/components/common/cover_layer';

    let userInfo = null;
    let isReady = false; // 有没有准备
    let shakeHandNumber = 0;
    let clear_set = null;
    let leftReady = false;
    let rightReady = false;

    export default class Game extends wepy.component {
        components = {
            outmodel: OutModel,
            touch:Touch,
            selecttime:SelectTime,
            threestage:ThreeStage,
            gamerank:GameRank,
            coverlayer:CoverLayer
        };

        data = {
            widWidth:0,
            widHeight:0,
            px2rpxWidth:0,
            px2rpxHeight:0,
            bgImg: imgApi.pk_model_bg,

            // 点击按钮是否显示
            isDot:false,

            // 点击按钮参数
            ratio:0.8,
            imgType:1,

            // 倒计时开始(true开始)
            countdownStart:false,

            // hasTimeConfirmBtn: false,
            // 倒计时时间
            // selectTimeIndex:[0,0,0],
            time:null,
            // 倒计时结束(true结束/false没有结束)
            countdownOver:false,

            // 3/2/1倒计时
            NumBg:imgApi.count_down,
            // 是否显示3/2/1倒计时
            isCountDownNum:false,
            countDownNum:3,

            // 是否显示遮盖层
            showCoverLayer:false,
            // 游戏结束排名是否显示
            showGameRank:false,
            gameRankRatio:1,
        };

        props = {
            roomId:{},
            legOrHand:{},

            // 房主开始按钮/组员准备按钮
            readyOrStartBtn:{
                type:String,
                twoWay:true,
            },

            stageDataLeft:{
                type:Object,
                twoWay:true,
            },
            numLeft:{
                twoWay:true
            },
            stageDataCenter:{
                type:Object,
                twoWay:true,
            },
            numCenter:{
                twoWay:true
            },
            stageDataRight:{
                type:Object,
                twoWay:true,
            },
            numRight:{
                twoWay:true
            },

            // 选择时间确定按钮(房主有确定按钮/组员没有)
            hasTimeConfirmBtn:{
                type:Boolean,
                twoWay:true,
            },

            // 倒计时时间
            selectTimeIndex:{
                type:Array,
                twoWay:true,
            },

            // 开始倒计时
            countdownStart:{
                type:Boolean,
                twoWay:true,
            }
        };

        onLoad(){
            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.widWidth = px2rpx.originalWidth;
            this.widHeight = px2rpx.originalHeight;
            this.$apply();

            // 把自己的信息绑定到中间舞台
            this.updateStageDataCenter();

            // 开启webSocket
            weixin.weixinConnectSocket(userInfo.id);
            // 发送数据
            weixin.weixinsendSocketMessage('', this.stageDataCenter );
            // 接收数据
            weixin.weixinOnSocketMessage((data)=>{
                // 把左右数据绑定
                console.log(data);
            });
        };

        watch = {
            // 倒计时结束
            countdownOver(newValue){
                if(newValue){
                    this.isOverCountDown(true);
                }
            }

        };

        methods = {
            // 房主开始/组员准备按钮
            readyOrStartTap(){
                this.$emit('readyOrStartE');
            },

        };

        events = {
            // 开始倒计时
            countDownNum321Events(){
                this.countDownNum321();
            },

            // 点击事件
            clickEvents(){
                // 手抖
                if( (this.legOrHand == 0) && (!this.hasTimeConfirmBtn) ){
                    shakeHandNumber++;
                    this.numCenter = shakeHandNumber;
                    this.$apply();
                    // 发送websocket
                    weixin.weixinsendSocketMessage('', this.numCenter );
                }
            },

            // 退出事件
            outEvents(){
                this.isOverCountDown(false);
                // 关闭websocket
                weixin.weixinCloseWebSocket();
            },

            // 取消遮盖层
            cancelShow(){
                this.cancelCoverlayer();
            },



        };

        // 完善自己的舞台信息
        updateStageDataCenter(){
            // 把自己的信息绑定到中间舞台
            userInfo = wepy.getStorageSync(USER_INFO);
            this.stageDataCenter.userId = userInfo.id;
            this.stageDataCenter.logo = userInfo.logo;
            this.stageDataCenter.photo = userInfo.photo;
            this.stageDataCenter.roomId = this.roomId;
            this.stageDataCenter.legOrHand = this.legOrHand;
            this.numCenter = userInfo.name;
            this.$apply();
        }

        // 3/2/1倒计时
        countDownNum321(){
            let that =this;
            // 发送websocket
            weixin.weixinsendSocketMessage('', this.isCountDownNum);
            this.isCountDownNum = true;
            clear_set = setInterval(function() {
                that.countDownNum--;
                that.$apply();
                if(that.countDownNum === 0){
                    clearInterval(clear_set);
                    that.startE();
                }
            },1000);
        }

        // 开始
        startE(){
            this.isCountDownNum = false;
            this.countdownStart = true;
            this.countdownOver = false;
            this.isDot = true;
            this.numCenter = 0;
            this.numLeft = 0;
            this.numRight = 0;
            this.$apply();
            // 发送websocket
            weixin.weixinsendSocketMessage('', this.isDot);
        }

        // 倒计时完成
        isOverCountDown(flag = true){
            // 添加游戏记录
            clearInterval(clear_set);
            this.$broadcast('stopCountDown');
            this.countDownNum = 3;
            this.isCountDownNum = false;
            this.countdownStart = false;
            this.countdownOver = false;
            this.isDot = false;
            this.$emit('isOverCountDownEvents');
            this.$apply();
            if(flag){
                this.addGameRecord();
                this.gameRankE();
            }

        }

        // 统计游戏排名
        gameRankE(){
            let ranking = [
                {num:this.numLeft, logo:this.stageDataLeft.logo, photo:this.stageDataLeft.photo},
                {num:this.numCenter, logo:this.stageDataCenter.logo, photo:this.stageDataCenter.photo},
                {num:this.numRight, logo:this.stageDataRight.logo, photo:this.stageDataRight.photo},
            ];
            this.gameRankData = ranking;
            this.$apply();
            this.$invoke('gamerank','display',ranking);
            this.showGameRankE();
        }

        // 显示游戏排名
        showGameRankE(){
            this.showCoverLayer = true;
            this.showGameRank = true;
            this.$apply();
        }

        // 取消遮盖层
        cancelCoverlayer(){
            this.showCoverLayer = false;
            this.showGameRank = false;
            this.$apply();
        }

        // 添加游戏记录
        async addGameRecord(){
            let that = this;
            await api.addRecord({
                query:{
                    userId: userInfo.id,
                    time: that.time,
                    shakeNum: shakeHandNumber,
                    // 0（自己）1（好友）
                    type: 0,
                    // 0（手动）1（脚动）
                    status: that.legOrHand,
                    model:api.PKModel,
                }
            });
        }

    }
</script>

