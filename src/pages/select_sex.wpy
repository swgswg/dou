// pages--选择性别
<style lang="less">
    .select-sex{

        .left,.right{
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
        }

        .active-text{
            color:red;
        }

        .content_bgcolor{
            background-color: #f3e560;
        }
    }


</style>

<template>
    <view class="pr flex-center w-percent100 select-sex">

        <view class="flex-between w-percent100">
            <view class="left w-percent50 border-box {{currentProfile == 0 ? 'content_bgcolor':''}}" style="height:{{1205*px2rpxHeight}}px;padding:{{100*px2rpxHeight}}px 0;">
                <view class="flex-column-center">
                    <image src="{{currentSex == 1 ? woman_active : woman_inactive}}"
                           lazy-load='true'
                           data-sex= '1'
                           @tap.stop="selectSex"
                           style="width:{{150*px2rpxWidth}}px;height:{{150*px2rpxWidth}}px;">
                    </image>
                    <view class="f30 {{currentSex == 1 ? 'active-text' : ''}}"
                          style="margin-top:{{20*px2rpxHeight}}px;">
                        女
                    </view>
                </view>
                <view class="flex-center sex-img-each">
                    <image src="{{profile[0]}}"
                           lazy-load='true'
                           data-index="0"
                           @tap.stop="selectProfile"
                           style="width:{{200*px2rpxWidth}}px;height:{{357*px2rpxWidth}}px;">
                    </image>
                </view>
            </view>

            <view class="right w-percent50 border-box {{currentProfile == 1 ? 'content_bgcolor':''}}" style="height:{{1205*px2rpxHeight}}px;padding:{{100*px2rpxHeight}}px 0;">
                <view class="flex-column-center">
                    <image src="{{currentSex == 0 ? man_active : man_inactive}}"
                           lazy-load='true'
                           data-sex = '0'
                           @tap.stop="selectSex"
                           style="width:{{150*px2rpxWidth}}px;height:{{150*px2rpxWidth}}px;">
                    </image>
                    <view class="f30 {{currentSex == 0 ? 'active-text' : ''}}"
                          style="margin-top:{{20*px2rpxHeight}}px;">
                        男
                    </view>
                </view>

                <view class="flex-center sex-img-each">
                    <image src="{{profile[1]}}"
                           lazy-load='true'
                           data-index="1"
                           @tap.stop="selectProfile"
                           style="width:{{200*px2rpxWidth}}px;height:{{357*px2rpxWidth}}px;">
                    </image>
                </view>
            </view>
        </view>

        <view class="pa flex-center" style="bottom:{{50*px2rpxHeight}}px;" wx:if="{{currentSex == '0' || currentSex == '1'}}">
            <button class="button button-highlight button-pill button-large" open-type="getUserInfo" bindgetuserinfo="getUserInfo">确认</button>
        </view>

    </view>
</template>

<script>
    import wepy from 'wepy';
    import {USER_INFO,PX_TO_RPX,PAGES_PATH} from '@/utils/constant';
    import api from '@/utils/api';
    import imgApi from '@/utils/imgApi';
    import tip from '@/utils/tip';
    import util from '@/utils/util';
    import { Base64 } from '@/utils/base64';

    let name = null;
    let photo = null;
    let userInfo = null;

    export default class SelectSex extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: '选择性别'
        };

        // 声明页面中所引用的组件，或声明组件中所引用的子组件
        components = {};

        // 页面所需数据均需在这里声明，可用于模板数据绑定
        data = {
            px2rpxWidth:0,
            px2rpxHeight:0,
            // 男女性别图标
            man_active: imgApi.man_active,
            man_inactive: imgApi.man_inactive,
            woman_active: imgApi.woman_active,
            woman_inactive: imgApi.woman_inactive,

            // 选择的性别 男0女1/-1没有选择
            currentSex:-1,
            // 性别对应的人物
            profile:[],
            // 选择的人物 -1没有选择
            currentProfile:-1,
            // 小人物logo
            logo:'',
        };

        // 在Page和Component共用的生命周期函数
        async onLoad() {
            let px2rpx = await wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.$apply();
            userInfo = wepy.getStorageSync(USER_INFO);
        };

        methods = {
            // 选择性别
            selectSex(e){
                let sex = e.currentTarget.dataset.sex;
                this.currentSex = sex;
                this.$apply();
                if(sex == 0){
                    this.profile = [ imgApi.man1, imgApi.man2 ];
                } else if(sex == 1){
                    this.profile = [ imgApi.woman1, imgApi.woman2 ];
                }
                this.currentProfile = -1;
                this.$apply();
            },

            // 选择人物
            selectProfile(e){
                let index = parseInt(e.currentTarget.dataset.index);
                this.currentProfile = index;
                if(this.currentSex == 0){
                    this.logo = 'man'+(index+1)+'.png';
                } else if(this.currentSex == 1){
                    this.logo = 'woman'+(index+1)+'.png';
                }
                this.$apply();
            },

            // 获取用户授权信息
            async getUserInfo(e){
                let that = this;
                // console.log(e);
                // 性别选择
                if(this.currentSex == -1){
                    tip.longtoast('请选择性别');
                    return;
                }
                // 人物选择
                if(this.currentProfile == -1){
                    tip.longtoast('请选择动漫人物');
                    return;
                }
                console.log(e);
                if (e.detail.errMsg == 'getUserInfo:ok'){
                    // 授权成功
                    // console.log('name=============');
                    // console.log(e.detail.userInfo.nickName);
                    // name = Base64.encode(e.detail.userInfo.nickName);
                    // console.log(name);
                    // console.log(Base64.decode(e.detail.userInfo.nickName));
                    name = e.detail.userInfo.nickName;
                    photo = e.detail.userInfo.avatarUrl;
                    // encryptedData = e.detail.encryptedData;
                    // tip.longtoast(encryptedData++);
                    // iv = e.detail.iv;
                    that.updateInfo();

                } else {
                    // 授权失败
                    tip.longtoast('请重新确认授权');
                    return;
                }
            }
        };


        // 修改信息
        async updateInfo() {
            let that = this;
            let rlt = await api.updateSex({
                query: {
                    userId: userInfo.id,
                    sex: that.currentSex,
                    logo: that.logo,
                    name: name,
                    photo: photo,
                }
            });
            if (rlt.data.state == 1) {
                let res = await api.getOneUserInfo({
                    query: {
                        userId: userInfo.id,
                    }
                });
                if (res.data.state == 1) {
                    // 更新缓存
                    wepy.setStorageSync(USER_INFO, res.data.data);
                    // console.log('更新成功');

                    // 获取信息成功
                    let pagesPath = wepy.getStorageSync(PAGES_PATH);
                    console.log(pagesPath);
                    if (util.isEmpty(pagesPath.path)) {
                        wx.switchTab({
                            url: '/pages/select_model'
                        });
                    } else {
                        wx.redirectTo({
                            url: pagesPath.path,
                        });
                    }
                } else {
                    tip.error('网络请求失败');
                }
            }
        }

    }
</script>

