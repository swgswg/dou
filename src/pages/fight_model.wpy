// page--挑战模式
<style lang="less">
    .fight{

        .num{
            font-size: 100rpx;
            font-weight: bolder;
        }

        .time{
            font-weight: bolder;
        }

    }
</style>

<template>
    <view class="pr flex-column bg-repeat-size fight"
          style="width:{{widWidth}}px;height:{{widHeight}}px;background-image: url({{bgImg}});">

        <!--退出按钮 start-->
        <view class="pa" style="top:{{32*px2rpxHeight}}px;right:{{32*px2rpxWidth}}px;">
            <outmodel></outmodel>
        </view>
        <!--退出按钮 end-->

        <!--倒计时 start-->
        <view class="flex-center w-percent100 f36 cfcf05b time" style="margin-top:{{142*px2rpxHeight}}px;">
            <view>倒计时: </view>
            <view style="padding:0 {{10*px2rpxWidth}}px;">
                <countdown :time.sync="fightTime" :timeFinish.sync="timeFinish"></countdown>
            </view>
            <view>分</view>
        </view>
        <!--倒计时 end-->

        <!--抖动次数 start-->
        <view class="flex-center w-percent100 cfcf05b f-family-edo num" style="margin-top:{{20*px2rpxHeight}}px;">
            <view class="animated {{animate}}">{{shakeHandNumber}}</view>
        </view>
        <!--抖动次数 end-->

        <!--鹿背景 start-->
        <view class="flex-center w-percent100" style="top:{{300*px2rpxHeight}}px;left:0;">
            <image src="{{beerImg}}" class="animated {{animate}}" style="width: {{663*px2rpxWidth}}px;height: {{734*px2rpxWidth}}px;"></image>
        </view>
        <!--鹿背景 end-->

        <!--点击按钮 start-->
        <view class="pa flex-center w-percent100" style="top:{{700*px2rpxHeight}}px;left:0;">
            <touch :ratio.sync="ratio" :imgType.sync="imgType" :num.sync="shakeHandNumber"></touch>
        </view>
        <!--点击按钮 end-->

        <!--开始按钮 start-->
        <view class="pa flex-center w-percent100" style="bottom:50rpx;left:0;">
            <view class="button button-highlight button-pill button-large"
                  @tap.stop="start">
                开始
            </view>
        </view>
        <!--开始按钮 end-->

        <!--商城按钮 start-->
        <view class="pa" style="bottom:{{35*px2rpxHeight}}px;right:{{35*px2rpxWidth}}px;">
            <gomall></gomall>
        </view>
        <!--商城按钮 send-->

        <!--通关奖励弹窗 start-->
        <view wx:if="{{showCoverLayer}}">
            <coverlayer>
                <view slot="content" class="pr flex-center bg-repeat-size"
                      style="width:{{705*px2rpxWidth}}px;height:{{735*px2rpxWidth}}px;background-image: url({{jiangli}});">

                    <!--奖励礼物 start-->
                    <view class="flex-center w-percent100">
                        <image src="{{fileUrl + fightData.photo}}" style="width:{{300*px2rpxWidth}}px;height:{{300*px2rpxWidth}}px;"></image>
                    </view>
                    <!--奖励礼物 end-->

                    <!--按钮 start-->
                    <view class="pa flex-column-center w-percent100" style="bottom:{{20*px2rpxHeight}}px;left:0;">

                        <!--商城按钮 start-->
                        <view class="flex-center w-percent100 f24" style="margin-bottom:{{20*px2rpxWidth}}px;">
                            <view>点击</view>
                            <view style="margin:0 {{10*px2rpxWidth}}px;">
                                <gomall></gomall>
                            </view>
                            <view>购买更多礼物</view>
                        </view>
                        <!--商城按钮 end-->

                        <!--领取按钮 start-->
                        <view class="flex-center w-percent100">
                            <view class="flex-center f30 cfcf05b br10"
                                  style="width:{{120*px2rpxWidth}}px;height:{{60*px2rpxWidth}}px;background-color:#353a68"
                                  @tap.stop="bindReceiveIncentive">
                                领取
                            </view>
                        </view>
                        <!--领取按钮 end-->

                    </view>
                    <!--按钮 end-->

                </view>
            </coverlayer>
        </view>
        <!--通关奖励弹窗 end-->

    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX,USER_INFO } from '@/utils/constant';
    import imgApi from '@/utils/imgApi';
    import api from '@/utils/api';
    import tip from '@/utils/tip';

    import OutModel from '@/components/out_model';
    import GoMall from '@/components/go_mall';
    import CountDown from '@/components/count_down';
    import Touch from '@/components/touch';
    import CoverLayer from '@/components/common/cover_layer';

    let userId = null;
    // true开始/false没开始
    let startFlag = false;
    // true领取奖励/false没有领取奖励
    let isReceiveIncentive = false;

    export default class FightModel extends wepy.page {
        config = {
            navigationBarTitleText: '挑战模式',
            disableScroll: true,
            enablePullDownRefresh:false,
        };

        components = {
            outmodel: OutModel,
            gomall: GoMall,
            countdown: CountDown,
            touch: Touch,
            coverlayer: CoverLayer,
        };

        data = {
            widWidth:0,
            widHeight:0,
            px2rpxWidth:0,
            px2rpxHeight:0,
            fileUrl:imgApi.fileUrl,
            bgImg: imgApi.fight_model_bg,
            beerImg:imgApi.fight_model_deer,
            jiangli:imgApi.flight_jiangli,
            lingqu:imgApi.flight_liqu,
            animate:'',
            // 挑战模式基础数据
            fightData:null,
            // 挑战模式的倒计时时间
            fightTime:'01:00',
            // true倒计时结束/false倒计时没有结束
            timeFinish:true,
            shakeHandNumber:0,
            // 按钮参数
            ratio:0.6,
            imgType:0,

            // true显示遮盖层/false不显示遮盖层
            showCoverLayer:false,
        };

        onLoad() {
            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.widWidth = px2rpx.originalWidth;
            this.widHeight = px2rpx.originalHeight;

            userId = wepy.getStorageSync(USER_INFO).id;
        };

        onReady() {
            // 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
            wx.setKeepScreenOn({
                keepScreenOn:true
            });

            this.getFightData();
        };

        methods = {
            // 开始
            start(){
                if(startFlag){
                    return;
                }
                this.timeFinish = false;
                // 抖动次数清零
                this.shakeHandNumber = 0;
                this.$apply();
                isReceiveIncentive = false;
                startFlag = true;
            },

            // 领取按钮
            bindReceiveIncentive(){
                this.receiveIncentive(true);
            }
        };

        watch = {
            // 游戏结束弹出奖励
            timeFinish(newValue){
                if(newValue){
                    // 添加游戏记录--手动
                    this.addGameRecord(1);
                    // 计时时间归位
                    this.fightTime = this.fightData.time;
                    // 比较抖动次数有没有超过指定次数
                    if( parseInt(this.shakeHandNumber) >= parseInt(this.fightData.num)){
                        // 超过指定次数,显示遮盖层
                        this.showCoverLayer = true;
                    } else {
                        tip.longtoast('您没有达到『'+ this.fightData.num +'』次,无法获取奖励');
                    }
                    this.$apply();
                    startFlag = false;
                }
            },

            // 数字改变
            shakeHandNumber(){
                this.animated();
            },
        };

        events = {
            // 点击事件  点击计数
            clickEvents(){
                if(this.timeFinish){
                    return;
                }
                this.shakeHandNumber++;
                this.$apply();
            },

            // 取消遮盖层
            cancelShow(){
                this.cancelCoverlayer();
            },

            // 退出事件
            outEvents(){
                this.outE();
            },

            // 前去商城,同时领取奖励
            goMallEvents(){
                if(this.showCoverLayer){
                    this.receiveIncentive(false);
                }
            },
        };

        // 获取挑战模式数据
        async getFightData(){
            let res = await api.getChallengeMode();
            if(res.data.state == 1){
                let data = res.data.data[0];
                this.fightData = data;
                this.fightTime = data.time;
                this.$apply();
            } else {
                tip.error('网络错误');
            }
        }

        // 添加游戏记录
        async addGameRecord(mystatus){
            let that = this;
            await api.addRecord({
                query:{
                    userId:userId,
                    time: that.fightData.time,
                    shakeNum: that.shakeHandNumber,
                    // 0（自己）1（好友）
                    type: 0,
                    // 0（手动）1（脚动）
                    status: mystatus,
                    model:api.fightModel,
                }
            });
        }

        // 领取通关奖励
        async receiveIncentive(isToast = true){
            if(isReceiveIncentive){
                if(isToast){
                    tip.alert('您已领取');
                }
                return;
            }
            let giftId = this.fightData.giftId;
            // 添加相应的礼物
            let res = await api.addUserGift({
                query:{
                    userId: userId,
                    giftId: giftId,
                    num:1
                }
            });
            if(res.data.state == 1){
                isReceiveIncentive = true;
                if(isToast){
                    tip.toast('领取成功');
                }
            } else {
                tip.error('网络错误');
            }
        }

        // 取消遮盖层
        cancelCoverlayer(){
            this.showCoverLayer = false;
            isReceiveIncentive = false;
            this.$apply();
        }

        // 退出事件
        outE(){
            // 计时时间归位
            this.fightTime = this.fightData.time;
            // 抖动次数清零
            this.shakeHandNumber = 0;
            // 倒计时结束
            this.timeFinish = true;
            isReceiveIncentive = false;
            startFlag = false;
            this.$apply();
        }

        // 动画
        animated(){
            let that = this;
            this.animate = 'zoomIn';
            setTimeout(function() {
                that.animate = '';
                that.$apply();
            },500);
        };
    }
</script>
