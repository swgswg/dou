// page--故事模式
<style lang="less">
    .story{

        .logo{
            align-items: flex-end;
        }
    }
</style>

<template>
    <view class="pr flex-column bg-repeat-size story"
          style="width:{{widWidth}}px;height:{{widHeight}}px;background-image: url({{bgImg}});">

        <!--退出按钮 start-->
        <view class="pa" style="top:{{32*px2rpxHeight}}px;right:{{32*px2rpxWidth}}px;">
            <outmodel></outmodel>
        </view>
        <!--退出按钮 end-->

        <!--点击按钮 start-->
        <view class="flex-center w-percent100" style="margin-top:{{197*px2rpxHeight}}px;">
            <image src="{{btnImg}}"
                   style="width:{{398*px2rpxWidth}}px;height:{{350*px2rpxWidth}}px;"
                   @tap.stop="clickEvent">
            </image>
        </view>
        <!--点击按钮 end-->

        <!--舞台 start-->
        <view class="pa flex-center w-percent100" style="bottom:{{200*px2rpxHeight}}px;left:0;">
            <stagetwo :stageData.sync="stageData" :num.sync="shakeHandNumber"></stagetwo>
        </view>
        <!--舞台 end-->

        <!--遮盖层 start-->
        <view wx:if="{{showCoverLayer}}">
            <coverlayer>
                <veiw class="flex-center w-percent100 h-percent100" slot="content">
                    <image model="aspectFill" src="{{fileUrl + storys[i].img}}" style="width:{{storys[i].width}}px;height:{{storys[i].height}}px;"></image>
                </veiw>
            </coverlayer>
        </view>
        <!--遮盖层 end-->

    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX,USER_INFO } from '@/utils/constant';
    import imgApi from '@/utils/imgApi';
    import api from '@/utils/api';
    import tip from '@/utils/tip';
    import StageTwo from '@/components/stage_two';
    import OutModel from '@/components/out_model';
    import GoMall from '@/components/go_mall';
    import CountDown from '@/components/count_down';
    import CoverLayer from '@/components/common/cover_layer';


    // 需要显示故事的次数数组
    let nums = [];
    let numsIndex = 0;

    export default class StoryModel extends wepy.page {
        config = {
            navigationBarTitleText: '故事模式',
            disableScroll: true,
            enablePullDownRefresh:false,
        };

        components = {
            stagetwo:StageTwo,
            outmodel: OutModel,
            gomall: GoMall,
            countdown: CountDown,
            coverlayer: CoverLayer,
        };

        data = {
            widWidth:0,
            widHeight:0,
            px2rpxWidth:0,
            px2rpxHeight:0,
            fileUrl:imgApi.fileUrl,
            bgImg: imgApi.story_model_bg,
            fire_flag_left:imgApi.fire_flag_left,
            fire_flag_right:imgApi.fire_flag_right,
            btnImg:imgApi.story_btn,
            stageData:{ratio:1, logo:'', photo:'', isLight:1},
            shakeHandNumber:0,
            // 故事
            storys: null,
            // 读取的nums数组的下标
            i: -1,
            // true显示遮盖层/false不显示遮盖层
            showCoverLayer:false,
        };

        onLoad() {
            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.widWidth = px2rpx.originalWidth;
            this.widHeight = px2rpx.originalHeight;

            let userInfo = wepy.getStorageSync(USER_INFO);
            this.stageData.logo = userInfo.logo;
            this.stageData.photo = userInfo.photo;
            this.$apply();
        };

        onReady() {
            // 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
            wx.setKeepScreenOn({
                keepScreenOn:true
            });

            // 获取故事
            this.getStory();
        };

        methods = {
            // 点击按钮计数
            clickEvent(){
                this.shakeHandNumber++;
                this.$apply();
            }
        };

        watch = {
            shakeHandNumber(newValue){
                if(newValue === nums[numsIndex]){
                    this.i = numsIndex;
                    this.showCoverLayer = true;
                    numsIndex++;
                    this.$apply();
                }
            },
        };

        events = {
            // 取消遮盖层
            cancelShow(){
                this.cancelCoverlayer();
            },

            // 退出事件
            outEvents(){
                // 抖动次数清零
                this.shakeHandNumber = 0;
                this.$apply();
                numsIndex = 0;
            },
        };

        // 取消遮盖层
        cancelCoverlayer(){
            this.showCoverLayer = false;
            this.$apply();
        }

        // 获取故事
        async getStory(){
            let res = await api.getStoryModeSJ();
            if(res.data.state == 1){
                let storys = res.data.data;
                this.storys = storys;
                this.$apply();
                nums = storys.map(function(item) {
                    return item.num;
                });
            } else {
                tip.error('网络错误');
            }

        }
    }
</script>

