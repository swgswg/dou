<template>
    <view class="order">
        <!--tab模块-->
        <view class="swiper-tab-pd">
            <tab @currentTab.user="getCurrentTab" :tabList.sync="tabList" :currentTab.sync="currentTab"></tab>
        </view>

        <!--订单列表 start-->
        <view class="order-list" style="height:{{1110*px2rpxHeight}}px">
            <scroll-view scroll-y="true" bindscrolltolower="onReachBottom">
                <orderitem></orderitem>
                <!--加载更多时动画-->
                <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
                <!--暂无数据显示-->
                <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
            </scroll-view>
        </view>
        <!--订单列表 end-->

    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX } from '@/utils/constant';
    import Tab from '@/components/common/tab';
    import OrderItem from '@/components/order_item';
    import BottomLoadMore from "@/components/common/bottomLoadMore";
    import Placeholder from "@/components/common/placeholder";

    export default class MyPage extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: '我的订单'
        };

        // 声明页面中所引用的组件，或声明组件中所引用的子组件
        components = {
            tab:Tab,
            orderitem:OrderItem,
            bottomLoadMore: BottomLoadMore,
            placeholder: Placeholder
        };

        // 页面所需数据均需在这里声明，可用于模板数据绑定
        data = {
            px2rpxWidth:0,
            px2rpxHeight:0,
            tabList: ["全部", "待支付","待发货", "待收货", "已完成"],
            // (可退货),3待收货,4收货待评价(订单完成),5评价完成,6换货,7退货

        };

        // 在Page和Component共用的生命周期函数
        async onLoad(){
            let px2rpx = await wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.$apply();
        };

        // 只在Page中存在的页面生命周期函数
        onShow() {
        };

        // 只在Page中存在的页面生命周期函数
        onReady() {
        };

        // 声明页面所引用的Mixin实例
        mixins = [];

        // 声明计算属性（详见后文介绍）
        computed = {};

        // 声明数据watcher（详见后文介绍）
        watch = {};

        // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明
        methods = {};

        // 声明组件之间的事件处理函数
        events = {};
    }
</script>

<style lang="less">
    page{
        background-color: #f0f0f0;
    }
    .order{
        .swiper-tab-pd {
            padding: 0 30rpx;
            background: #fff;
            box-sizing: border-box;
        }

        .order-list{
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
        }
    }
</style>