<template>
    <view class="address">
        <block wx:if="{{hasData}}">
            <view style="width:100%;">
                <addresslist :addressList.sync="addressList" :isAllowEdit.sync="isAllowEditAddress"></addresslist>
            </view>
        </block>
        <block wx:else>
            <view style="width:100%;height:{{154*px2rpxHeight}}px;">
                <emptyaddress :selectOrAdd.sync="selectOrAdd"></emptyaddress>
            </view>
        </block>
        <view class="add-btn" style="height:{{98*px2rpxHeight}}px;">
            <view @tap.stop="add">+ 新增地址</view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import {USER_INFO,PX_TO_RPX} from '@/utils/constant';
    import api from '@/utils/api';
    import tip from '@/utils/tip';
    import util from '@/utils/util';
    import EmptyAddress from '@/components/empty_address';
    import AddressList from '@/components/address_list';

    export default class MyPage extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: '我的地址'
        };

        // 声明页面中所引用的组件，或声明组件中所引用的子组件
        components = {
            emptyaddress:EmptyAddress,
            addresslist:AddressList,
        };

        // 页面所需数据均需在这里声明，可用于模板数据绑定
        data = {
            px2rpxWidth:0,
            px2rpxHeight:0,
            userInfo:null,
            hasData:true,
            // 地址
            addressList:[],
            // 是否允许编辑地址
            isAllowEditAddress:true,
            selectOrAdd:'新建',
        };

        // 在Page和Component共用的生命周期函数
        async onLoad(){
            let px2rpx = await wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;

            let userInfo = await wepy.getStorageSync(USER_INFO);
            this.userInfo = userInfo;
            this.$apply();
        };

        // 只在Page中存在的页面生命周期函数
        onShow() {
        };

        // 只在Page中存在的页面生命周期函数
        async onReady() {
            let that = this;
            // 获取地址列表
            let res = await api.getAddress({
                query:{
                    userId:that.userInfo.id
                }
            });
            // console.log('addr==',res.data.data);
            if(res.data.state == 1){
                let addr = res.data.data;
                if(util.isEmpty(addr)){
                    this.hasData = false;
                } else {
                    this.hasData = true;
                    this.addressList = addr;
                }
            } else {
                tip.error('网络错误');
            }
            this.$apply();
        };

        // 声明页面所引用的Mixin实例
        mixins = [];

        // 声明计算属性（详见后文介绍）
        computed = {};

        // 声明数据watcher（详见后文介绍）
        watch = {};

        // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明
        methods = {
            add(){
                wepy.redirectTo({
                    url:'/pages/address_add'
                });
            },
        };

        // 声明组件之间的事件处理函数
        events = {

        };
    }
</script>

<style lang="less">
    .address{
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;

        .add-btn {
            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            left: 0;
            bottom: 0rpx;
            color: #fff;
            background-color: #ffd824;
        }
    }
</style>