<template>
    <view class="select-bluetooth">
        <view class="head" style="margin-top:{{27*px2rpxHeight}}px;">
            <view class="head-content">
                <view class="head-text">蓝牙</view>
                <myswitch :activeDot.sync="activeDotData"></myswitch>
            </view>
        </view>
        <view class="show-connect" style="height:{{90*px2rpxHeight}}" wx:if="{{connected}}">
            <view class="show-connect-text">{{connectName}}</view>
            <view>已连接</view>
        </view>
        <view class="select-text" style="height:{{75*px2rpxHeight}}px;">选择设备</view>
        <view class="bluetooth-list">
            <block wx:for="{{bluetoothData}}" wx:for-item="bt" wx:key="{{bt.deviceId}}">
                <view class="bluetooth-list-content" data-deviceId="{{bt.deviceId}}" data-connectname="{{bt.name}}" @tap.stop="connecting">
                    <text class="content-text">{{bt.name}}</text>
                    <text class="iconfont icon-youjiantou"></text>
                </view>
            </block>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import tip from '@/utils/tip';
    import util from '@/utils/util';
    import weixin from '@/utils/weixin';
    import MySwitch from  '@/components/common/my_switch';
    import BluetoothList from  '@/components/bluetooth_list';
    import { PX_TO_RPX,BLUETOOTH } from '@/utils/constant';

    // const zeroClearingHex   = 'FE08010000000000000108'; // 清零
    // const noZeroClearingHex = 'FE08010000000000000007'; // 不清零

    let connectingDeviceId = '';
    let services_UUID = '';
    let characteristic_UUID = '';

    export default class MyPage extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: '蓝牙设置'
        };

        // 声明页面中所引用的组件，或声明组件中所引用的子组件
        components = {
            myswitch:MySwitch,
            bluetoothList:BluetoothList,
        };

        // 页面所需数据均需在这里声明，可用于模板数据绑定
        data = {
            px2rpxWidth:0,
            px2rpxHeight:0,
            activeDotData:0,
            bluetoothData:[],
            // deviceList:[],
            connected:false,
            connectName:null,
            shakeLegNum:0,
        };

        // 获取屏幕尺寸适配
        async onLoad(){
            let px2rpx = await wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.$apply();
        }

        // 声明数据watcher（详见后文介绍）
        watch = {
            activeDotData(newvalue){
                if(newvalue == 1){
                    this.searchEvent();
                } else {
                    // tip.alert('蓝牙已关闭');
                    // 停止搜寻附近的蓝牙外围设备
                    this.stopDiscovery();
                    // 断开与低功耗蓝牙设备的连接
                    this.closeConnection();
                    // 关闭蓝牙模块
                    weixin.closeBluetooth();
                }
            }
        };

        // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明
        methods = {
            // 连接蓝牙
            connecting(e){
                if(this.connected){
                    return;
                }
                let deviceId = e.currentTarget.dataset.deviceid;
                let connectname = e.currentTarget.dataset.connectname;
                this.connectEvent(deviceId,connectname);
            },
        };

        // 搜索蓝牙
        searchEvent(){
            let that = this;

            // 初始化蓝牙
            that.openBluetooth();

            // 停止搜寻附近的蓝牙外围设备
            that.stopDiscovery();

            // 监听蓝牙适配器状态变化事件
            that.onBluetoothStateChange();

            // 获取本机蓝牙适配器状态
            that.getBluetoothState();

            // 开始搜寻附近的蓝牙外围设备
            // that.startDiscovery();

            // 监听寻找到新设备
            // that.onFoundBluetooth();
        };

        // 连接设备
        connectEvent(deviceId,connectname){

            // 停止搜寻附近的蓝牙外围设备
            this.stopDiscovery();

            // 断开与低功耗蓝牙设备的连接 然后再连接新的设备
            this.closeConnection(deviceId);

            // 连接低功耗蓝牙设备
            this.BLEConnection(deviceId,connectname);

        };

        // 初始化蓝牙模块
        openBluetooth(){
            let that = this;
            wx.openBluetoothAdapter({
                success(e){
                    if (e.errMsg == 'openBluetoothAdapter:ok'){
                        that.activeDotData = 1;
                        that.$apply();
                        // 获取本机蓝牙适配器状态
                        that.getBluetoothState();
                    }
                },
                fail(){
                    that.activeDotData = 0;
                    that.$apply();
                    tip.longtoast('请检查手机蓝牙是否开启');
                },
            });
        };

        // 获取本机蓝牙适配器状态
        getBluetoothState(){
            let that = this;
            wx.getBluetoothAdapterState({
                success(){
                    // 开始搜寻附近的蓝牙外围设备
                    that.startDiscovery();
                },
                fail(){
                    that.activeDotData = 0;
                    that.$apply();
                    // tip.error('蓝牙不可用');
                }
            });

        };

        // 监听蓝牙适配器状态变化事件
        onBluetoothStateChange(){
            wx.onBluetoothAdapterStateChange(function(res){
                if(!res.available){
                    tip.alert('蓝牙不可用');
                }
                console.log('监听蓝牙适配器状态变化');
            });
        };

        // 开始搜寻附近的蓝牙外围设备
        startDiscovery(){
            let that = this;
            wx.startBluetoothDevicesDiscovery({
                success (res) {
                    // tip.loading('正在搜索...');
                    // 监听寻找到新设备的事件
                    that.onFoundBluetooth();
                },
                fail(){
                    that.activeDotData = 0;
                    that.$apply();
                    // tip.error('搜索失败');
                }
            })
        };

        // 监听寻找到新设备的事件
        onFoundBluetooth(){
            let that = this;
            wx.onBluetoothDeviceFound(function (res) {
                // that.getDevices();
                // 兼容安卓及iOS设备
                if(res.deviceId){
                    that.devicesData(res);
                } else if(res.devices){
                    that.devicesData(res.devices[0]);
                } else if(res[0]){
                    that.devicesData(res[0]);
                }
            });
        };

        devicesData(new_devices){
            if(util.isEmpty(new_devices.name)){
                return;
            }
            let bluetoothData = this.bluetoothData;
            let isExist = false;
            if(util.isEmpty(bluetoothData)){
                bluetoothData = [];
            } else {
                let len = bluetoothData.length;
                for(let i = 0; i < len; i++){
                    if(new_devices.deviceId == bluetoothData[i].deviceId){
                        isExist = true;
                        bluetoothData.splice(i,1,new_devices);
                    }
                }
            }
            console.log(new_devices);
            if(!isExist){
                bluetoothData.push(new_devices);
            }
            this.bluetoothData = bluetoothData;
            this.$apply();
        };

        // 获取在蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备
        // getDevices(){
        //     let that = this;
        //     wx.getBluetoothDevices({
        //         success: function (res) {
        //             console.log('获取在蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备');
        //             console.log(res);
        //             // that.setData({
        //             //     deviceList:res.devices
        //             // });
        //         }
        //     })
        // };

        // 停止搜寻附近的蓝牙外围设备
        stopDiscovery(){
            wx.stopBluetoothDevicesDiscovery({
                success(res){
                    console.log('停止搜寻附近的蓝牙外围设备');
                    console.log(res);
                },
                fail(){
                    // tip.error('停止搜索失败');
                },
            });
        };

        // 连接低功耗蓝牙设备
        BLEConnection(deviceId,connectName){
            let that = this;
            tip.loading('连接中');
            wx.createBLEConnection({
                deviceId: deviceId,
                timeout: 60000,
                success(res){
                    console.log('连接成功');
                    console.log(res);
                    that.connected = true;
                    that.connectName = connectName;
                    connectingDeviceId = deviceId;
                    // 获取services
                    that.getServices(deviceId);
                    // 连接成功,停止搜寻附近的蓝牙外围设备
                    that.stopDiscovery();

                },
                fail(res){
                    console.log('连接失败');
                    console.log(res);
                    that.connected = false;
                    tip.loaded();
                    tip.error('连接失败');
                },
            });
            this.$apply();
        };

        // 断开与低功耗蓝牙设备的连接
        closeConnection(){
            if(util.isEmpty(connectingDeviceId)){
                return;
            }
            wx.closeBLEConnection({
                deviceId: connectingDeviceId,
                success(res){
                    console.log('断开与低功耗蓝牙设备的连接');
                    console.log(res);
                    tip.alert('断开蓝牙连接');
                },
                fail(){
                    tip.error('断开连接失败');
                }
            });
        };

        // 获取蓝牙设备所有服务(service) 为了获取service的UUID
        getServices(deviceId){
            let that = this;
            // console.log(deviceId);
            wx.getBLEDeviceServices({
                deviceId:deviceId,
                success(res){
                    console.log('获取蓝牙设备service');
                    console.log(deviceId);
                    console.log(res);
                    let uuid = res.services;
                    let len = uuid.length;
                    for(let i = 0; i < len; i++){
                        that.getCharacteristics(deviceId,res.services[i].uuid);
                    }
                },
                fail(res){
                    tip.error('获取服务失败');
                    console.log(res);
                },
            });
        };

        // 获取蓝牙设备某个服务中所有特征值(characteristic) 为了该特征值UUID支持的操作类型
        getCharacteristics(deviceId,servicesId){
            let that = this;
            wx.getBLEDeviceCharacteristics({
                deviceId:deviceId,
                serviceId:servicesId,
                success(res){
                    console.log('获取蓝牙设备characteristic');
                    console.log(res);
                    if(res.errCode == 0){
                        let characteristics = res.characteristics;
                        let len = characteristics.length;
                        for(let k = 0; k < len; k++){
                            let indicate = characteristics[k].properties.indicate;
                            let notify = characteristics[k].properties.notify;
                            let read = characteristics[k].properties.read;
                            let write = characteristics[k].properties.write;
                            console.log(indicate,notify,read,write);
                            if(indicate && notify && read && write){
                                // connectingDeviceId = res.deviceId;
                                connectingDeviceId = deviceId;
                                // console.log('connectingDeviceId');
                                // console.log(connectingDeviceId);
                                // services_UUID = res.serviceId;
                                services_UUID = servicesId;
                                // console.log('services_UUID');
                                // console.log(services_UUID);
                                characteristic_UUID = characteristics[k].uuid;
                                // console.log('characteristic_UUID');
                                // console.log(characteristic_UUID);
                                wepy.setStorageSync(BLUETOOTH, {connectingDeviceId:connectingDeviceId,services_UUID:services_UUID,characteristic_UUID:characteristic_UUID});
                                weixin.notifyValueChange(connectingDeviceId,services_UUID,characteristic_UUID,()=>{});
                                setTimeout(function() {
                                    tip.toast('连接成功');
                                    tip.loaded();
                                    wx.switchTab({
                                        url:'/pages/go_shake'
                                    });
                                },1000);
                            }
                        }
                    }

                },
                fail(){
                    tip.error('获取特征值失败');
                }
            });
        };

        // // 启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值
        // notifyValueChange(deviceId,services_UUID,characteristic_UUID){
        //     let that = this;
        //     wx.notifyBLECharacteristicValueChange({
        //         deviceId:deviceId,
        //         serviceId:services_UUID,
        //         characteristicId:characteristic_UUID,
        //         state:true,
        //         success(res){
        //             console.log('启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值: 成功---');
        //             console.log(res);
        //
        //             setTimeout(function () {
        //                 // let connectingDeviceId = that.data.connectingDeviceId;
        //                 // let services_UUID = that.data.services_UUID;
        //                 // let characteristic_UUID = that.data.characteristic_UUID;
        //                 that.writeValue(connectingDeviceId,services_UUID,characteristic_UUID,zeroClearingHex);
        //             },1000);
        //
        //             that.onValueChange();
        //         },
        //         fail(res){
        //             console.log('启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值: 失败---');
        //             console.log(res);
        //         },
        //     });
        // };

        // 监听低功耗蓝牙设备的特征值变化
        // 必须先启用 notifyBLECharacteristicValueChange 接口才能接收到设备推送的 notification。
        // onValueChange(){
        //     let that = this;
        //     wx.onBLECharacteristicValueChange(function(res){
        //         console.log('监听低功耗蓝牙设备的特征值变化');
        //         console.log(res);
        //         console.log(util.ab2hex(res.value));
        //         // 获取设备返回的数据
        //         let hex = util.ab2hex(res.value);
        //         // 获取总次数
        //         let num = util.hexSlice(hex);
        //         if(num.length > 22){
        //             // fe080100010000 d400 00dc fe08010001000000000008
        //             // 上次的抖腿数存入数据库
        //             weixin.addLegRecord(num);
        //             num = 0;
        //         }
        //         that.shakeLegNum = num;
        //     });
        //     this.$apply();
        // };

        // // 读取低功耗蓝牙设备的特征值的二进制数据值
        // // 接口读取到的信息需要在 onBLECharacteristicValueChange 方法注册的回调中获取
        // readValue(){
        //     // let connectingDeviceId = this.data.connectingDeviceId;
        //     // let services_UUID = this.data.services_UUID;
        //     // let characteristic_UUID = this.data.characteristic_UUID;
        //     wx.readBLECharacteristicValue({
        //         deviceId:connectingDeviceId,
        //         serviceId:services_UUID,
        //         characteristicId:characteristic_UUID,
        //         success(res){
        //             console.log('读取低功耗蓝牙设备的特征值的二进制数据值: 成功---');
        //             console.log(res);
        //         },
        //         fail(res){
        //             console.log('读取低功耗蓝牙设备的特征值的二进制数据值: 失败---');
        //             console.log(res);
        //         }
        //     });
        // };

        // // 向低功耗蓝牙设备特征值中写入二进制数据 建议每次写入不超过20字节
        // writeValue(deviceId,services_UUID,characteristic_UUID,value){
        //     let that = this;
        //     that.writeToBluetoothValue(deviceId,services_UUID,characteristic_UUID,value);
        // };
        //
        // // 蓝牙写数据
        // writeToBluetoothValue(deviceId,services_UUID,characteristic_UUID,buffer){
        //     let value = util.hex2ab(buffer);
        //     wx.writeBLECharacteristicValue({
        //         deviceId:deviceId,
        //         serviceId:services_UUID,
        //         characteristicId:characteristic_UUID,
        //         value:value,
        //         success(res){
        //             console.log('向低功耗蓝牙设备特征值中写入二进制数据: 成功---');
        //             console.log(res);
        //         },
        //         fail(res){
        //             console.log('向低功耗蓝牙设备特征值中写入二进制数据: 失败---');
        //             console.log(res);
        //         }
        //     })
        // };

        // // 关闭蓝牙模块
        // closeBluetooth(){
        //     wx.closeBluetoothAdapter({
        //         success(){
        //             tip.toast('关闭成功');
        //         },
        //         fail(){
        //             tip.error('关闭失败');
        //         }
        //     });
        // };

    }
</script>

<style lang="less">
    page{
        background-color: #f0f0f0;
    }
    .select-bluetooth{
        width: 100%;
        height: 100%;

        .head{
            display: flex;
            justify-content: center;
            align-items: center;
            /*margin-top: 27rpx;*/
            padding: 0rpx 28rpx 0rpx 30rpx;
            box-sizing: border-box;
            background-color: #fff;

            .head-content{
                display: flex;
                justify-content: space-between;
                align-items: center;
                width: 100%;
                padding: 28rpx 0 27rpx 0;
                box-sizing: border-box;
                border-bottom: 1rpx solid #51bcfd;
            }
        }

        .show-connect{
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            /*height: 90rpx;*/
            padding: 0rpx 28rpx 0rpx 30rpx;
            box-sizing: border-box;
            box-shadow: 3rpx 7rpx 10rpx #ccc;
            font-size: 30rpx;
            color: #000;
            opacity: 0.7;
            background-color: #fff;
        }

        .select-text{
            display: flex;
            justify-content: flex-start;
            align-items: center;
            width: 100%;
            /*height: 75rpx;*/
            padding-left: 30rpx;
            box-sizing: border-box;
            font-size: 30rpx;
            opacity: 0.5;
        }

        .bluetooth-list{
            width: 100%;
            padding: 2rpx  28rpx 0 30rpx;
            box-sizing: border-box;
            background-color: #fff;

            .bluetooth-list-content{
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 31rpx 0;
                box-sizing: border-box;
                border-bottom: 1rpx solid #51bcfd;

                .content-text{
                    font-size: 30rpx;
                    color: #000;
                    opacity: 0.7;
                }
            }

        }
    }

</style>