// pages--游戏-组员
<style lang="less">

</style>
<template>
    <view>
        <game :roomId.sync="roomId"
              :legOrHand.sync="legOrHand"
              :readyOrStartBtn.sync="readyOrStartBtn"
              :stageDataLeft.sync="stageDataLeft"
              :stageDataCenter.sync="stageDataCenter"
              :stageDataRight="stageDataRight"
              :hasTimeConfirmBtn.sync="hasTimeConfirmBtn"
              :selectTimeIndex.sync="selectTimeIndex"
              :isCountDownNum.sync="isCountDownNum"
              :countdownStart.sync="countdownStart"
        >
        </game>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX,USER_INFO } from '@/utils/constant';
    import imgApi from '@/utils/imgApi';
    import api from '@/utils/api';
    import tip from '@/utils/tip';
    import weixin from '@/utils/weixin';
    import util from '@/utils/util';
    import socketServer from '@/utils/socketServer';
    import wsDataDeal from '@/utils/wsDataDeal';

    import Game from '@/components/game';

    let userInfo = null;
    let shareId = null;
    let isReady = true; // 有没有准备
    let no_ready_btn = imgApi.no_ready_btn;
    let ready_btn = imgApi.ready_btn;

    export default class PKModelSlave extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: 'PK模式',
            disableScroll: true,
            enablePullDownRefresh:false,
        };

        components = {
            game:Game,
        };

        data = {
            widWidth:0,
            widHeight:0,
            px2rpxWidth:0,
            px2rpxHeight:0,

            roomId:null,
            legOrHand:null,
            // 组员是准备按钮
            readyOrStartBtn:ready_btn,
            // 组员不需要时间的确定按钮
            hasTimeConfirmBtn:false,

            stageDataLeft:{userId:'' , roomId:'', legOrHand:'', logo:'', photo:'', isLight:1, shakeHandNum:'邀请好友'},
            stageDataCenter:{userId:'' ,roomId:'',legOrHand:'', logo:'', photo:'', isLight:1, shakeHandNum:'邀请好友'},
            stageDataRight:{userId:'' ,roomId:'', legOrHand:'', logo:'', photo:'', isLight:1, shakeHandNum:'邀请好友'},

            // 倒计时时间
            selectTimeIndex:[0,0,0],

            // 3-2-1倒计时是否显示
            isCountDownNum:false,

            // 游戏时间倒计时开始
            countdownStart:false,
        };

        onLoad(options) {
            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.widWidth = px2rpx.originalWidth;
            this.widHeight = px2rpx.originalHeight;

            this.roomId = options.roomId;
            this.legOrHand = options.legOrHand;

            // 组员直接进来的 没有确定时间按钮
            this.hasTimeConfirmBtn = false;
            this.$apply();
            userInfo = wepy.getStorageSync(USER_INFO);
            // 通过分享进来的建立好友关系
            if(options.share){
                shareId = options.share;
                this.buildFriend(options.share);
            }
            // 组员判断能不能进入这个房间
            this.intoRoomJudgeE(options.roomId);

        };

        onReady() {
            let that = this;
            // 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
            wx.setKeepScreenOn({
                keepScreenOn:true
            });

            // 连接webSocket
            socketServer.wsInit( userInfo.id, (data)=>{
                // 组员信息
                console.log('webSocket==data============');
                console.log(data);
                wsDataDeal.wsDeal(data, that, (group)=>{
                    let arrs = this.dealGroupDataE(group);
                    if(arrs[0]){
                        this.updateStageLeftDateE(arrs[0]);
                    }
                    if(arrs[1]){
                        this.updateStageRightDateE(arrs[1]);
                    }
                }, (newTime)=>{
                    // 游戏时间
                    that.gameTimeE(newTime);
                }, (readyData)=>{
                    console.log('readyData=====================');
                    console.log(readyData);
                    // 组员准备
                    that.slaveReadyE(readyData);
                }, (startData)=>{
                    that.slaveStartE(startData);
                });
            });

        };

        events = {
            // 组员准备按钮
            readyOrStartE(){
                if(isReady){
                    this.readyOrStartBtn = no_ready_btn;
                    this.stageDataCenter.isLight = 2;
                    isReady = false;
                } else {
                    this.readyOrStartBtn = ready_btn;
                    this.stageDataCenter.isLight = 1;
                    isReady = true;
                }
                this.$apply();
                this.updateRoomStatusE();
            },

            // 倒计时结束
            isOverCountDownEvents(){
                this.isOverCountDownE();
            }

        };

        // 建立好友关系
        async buildFriend(share_id){
            // 通过转发进来的建立好友关系
            await api.inviteFriend({
                query:{
                    userId: userInfo.id,
                    weChat: share_id,
                }
            });
        }

        // 判断组员能不能进入这个房间
        async intoRoomJudgeE(myroomId){
            let res = await api.intoRoomJudge({
                query:{
                    userId:userInfo.id,
                    roomId:myroomId
                }
            });
            if(res.data.state == 1){
                // 把已有的房间人绑定到舞台上
                let userInfoArr = this.dealGroupDataE(res.data.data);
                if(userInfoArr[0]){
                    this.updateStageLeftDateE(userInfoArr[0]);
                }
                if(userInfoArr[1]){
                    this.updateStageRightDateE(userInfoArr[1]);
                }

            } else {
                // 不能进入房间
                wx.navigateBack({
                    delta: 1
                });
                // 关闭webSocket
                weixin.weixinCloseWebSocket();
                tip.alert('房间已满');
                return;
            }
        }

        // 去掉用户组里自己的信息
        dealGroupDataE(arrayData){
            let data = [];
            let len = arrayData.length;
            for(let i = 0; i < len; i++){
                if(arrayData[i].userId != userInfo.id){
                    data.push(arrayData[i]);
                }
            }
            return data;
        }

        // 把房间人物信息绑定到左边舞台
        updateStageLeftDateE(groupInfo){
            let that = this;
            for(let k in groupInfo){
                that.stageDataLeft[k] = groupInfo[k];
            }
            that.stageDataLeft.isLight = groupInfo.status;
            this.$apply();
        }
        // 把房间人物信息绑定到右边舞台
        updateStageRightDateE(groupInfo){
            let that = this;
            for(let k in groupInfo){
                that.stageDataRight[k] = groupInfo[k];
            }
            that.stageDataRight.isLight = groupInfo.status;
            this.$apply();
        }

        // 游戏时间开始倒计时
        start(){
            this.$broadcast('countDownNum321Events');
        }

        // 倒计时结束
        isOverCountDownE(){
            this.stageDataCenter.isLight = 0;
            this.readyBtn = ready_btn;
        }

        // 组员准备
        async updateRoomStatusE(){
            let that =this;
            await api.updateRoomStatus({
                query:{
                    userId: userInfo.id,
                    roomId: that.roomId,
                    status: that.stageDataCenter.isLight,
                }
            });
        }

        // 同步游戏时间
        gameTimeE(time){
            this.selectTimeIndex = time;
            this.$apply();
        }

        // 同步组员准备
        slaveReadyE(readyData){
            let that = this;
            readyData.forEach(function(item) {
                if(item.userId == that.stageDataRight.userId){
                    that.stageDataRight.isLight = item.status;
                } else if(item.userId == that.stageDataLeft.userId){
                    that.stageDataLeft.isLight = item.status;
                } else if(item.userId == that.stageDataCenter.userId){
                    that.stageDataCenter.isLight = item.status;
                }
                that.$apply();
            });
        }

        // 同步组员开始
        slaveStartE(startData){
            if(startData == 2){
                this.start();
            }
        }
    }
</script>
