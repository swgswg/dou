// pages--游戏-组员
<style lang="less">

</style>
<template>
    <view>
        <game :roomId.sync="roomId"
              :legOrHand.sync="legOrHand"
              :readyOrStartBtn.sync="readyOrStartBtn"
              :stageDataLeft.sync="stageDataLeft"
              :stageDataCenter.sync="stageDataCenter"
              :stageDataRight.sync="stageDataRight"
              :hasTimeConfirmBtn.sync="hasTimeConfirmBtn"
              :time.sync="time"
              :isCountDownNum.sync="isCountDownNum"
              :countdownStart.sync="countdownStart"
              :masterId.sync="masterId"
        >
        </game>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX,USER_INFO,GAME_USER,GAME_INFO,PAGES_PATH } from '@/utils/constant';
    import imgApi from '@/utils/imgApi';
    import api from '@/utils/api';
    import tip from '@/utils/tip';
    import util from '@/utils/util';
    import socketServer from '@/utils/socketServer';
    import wsDataDeal from '@/utils/wsDataDeal';

    import Game from '@/components/game';

    let userInfo = null;
    let shareId = null;
    let isReady = true; // 有没有准备
    let no_ready_btn = imgApi.no_ready_btn;
    let ready_btn = imgApi.ready_btn;


    export default class PKModelSlave extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: 'PK模式',
            disableScroll: true,
            enablePullDownRefresh:false,
        };

        components = {
            game:Game,
        };

        data = {
            widWidth:0,
            widHeight:0,
            px2rpxWidth:0,
            px2rpxHeight:0,

            roomId:null,
            legOrHand:null,
            masterId:null,
            // 组员是准备按钮
            readyOrStartBtn:ready_btn,
            // 组员不需要时间的确定按钮
            hasTimeConfirmBtn:false,

            stageDataLeft:{userId:'' , roomId:'', legOrHand:'', logo:'', photo:'', isLight:1, shakeHandNum:'邀请好友'},
            stageDataCenter:{userId:'', roomId:'',legOrHand:'', logo:'', photo:'', isLight:1, shakeHandNum:'邀请好友'},
            stageDataRight:{userId:'', roomId:'', legOrHand:'', logo:'', photo:'', isLight:1, shakeHandNum:'邀请好友'},

            // 倒计时时间
            time:'00:00:00',

            // 3-2-1倒计时是否显示(true显示,false不显示)
            isCountDownNum:false,

            // 游戏时间倒计时开始
            countdownStart:false,

            // 房主是不是在游戏中退出(0否/1是在游戏中退出)
            masterOutGaming: 0,
        };

        onLoad(options) {
            let roomId = options.roomId;
            let legOrHand = options.legOrHand;
            shareId = options.share;
            userInfo = wepy.getStorageSync(USER_INFO);

            // 首次跳转进来的判断用户信息全不全
            if(util.isEmpty(userInfo.logo)){
                // 把信息存入缓存
                let path = '/pages/PK_model_slave?share=' + shareId + '&roomId=' + roomId + '&legOrHand=' + legOrHand;
                wepy.setStorageSync(PAGES_PATH, {path: path});

                // 信息不全跳转去绑定信息
                wx.redirectTo({
                    url:'/pages/mobile_verify'
                });
                return;
            } else {
                wepy.setStorageSync(PAGES_PATH, { path: '' });
            }

            // 组员判断能不能进入这个房间
            // this.intoRoomJudgeE(options.roomId);

            let px2rpx = wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;
            this.widWidth = px2rpx.originalWidth;
            this.widHeight = px2rpx.originalHeight;

            this.roomId = roomId;
            this.legOrHand = legOrHand;

            // 组员直接进来的 没有确定时间按钮
            this.hasTimeConfirmBtn = false;
            this.$apply();

            // 通过分享进来的建立好友关系
            this.buildFriend(options.share);

        };

        onReady() {
            let that = this;
            setTimeout(function() {
                // 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
                wx.setKeepScreenOn({
                    keepScreenOn:true
                });

                // 连接webSocket
                socketServer.wsInit( userInfo.id, that.roomId,()=>{
                    // 进入房间
                    socketServer.wsSend({type:1, userId:userInfo.id, roomId:that.roomId, master:0});
                }, (data)=>{
                    // 接收websocket信息
                    wsDataDeal.wsDeal(data, that, userInfo.id);
                });

            },500);
        };

        events = {
            // 组员准备按钮
            readyOrStartE(){
                if(isReady){
                    this.readyOrStartBtn = no_ready_btn;
                    this.stageDataCenter.isLight = 2;
                    socketServer.wsSend({type:2, roomId:this.roomId, userId: userInfo.id, status: 2});
                } else {
                    this.readyOrStartBtn = ready_btn;
                    this.stageDataCenter.isLight = 1;
                    socketServer.wsSend({type:2, roomId:this.roomId, userId: userInfo.id, status: 1});
                }
                isReady = !isReady;
                this.$apply();
                // 组员准备
            },

            // 倒计时结束
            isOverCountDownEvents(){
                // 倒计时结束
                socketServer.wsSend({type:2, roomId: this.roomId, userId:userInfo.id, status:1});
                this.isOverCountDownE();
            },

            // socket关闭之前
            socketCloseBeforeEvents(){
                // socket关闭之前
                socketServer.wsSend({type:8 ,userId:userInfo.id,  roomId:this.roomId});
            }

        };

        // 建立好友关系
        async buildFriend(share_id){
            // 通过转发进来的建立好友关系
            await api.inviteFriend({
                query:{
                    userId: userInfo.id,
                    weChat: share_id,
                }
            });
        }

        // 判断组员能不能进入这个房间
        async intoRoomJudgeE(myroomId){
            let res = await api.intoRoomJudge({
                query:{
                    userId:userInfo.id,
                    roomId:myroomId
                }
            });
            console.log('判断组员能不能进入这个房间=========');
            console.log(res);
            if(res.data.state == 0){
                // 不能进入房间
                wx.switchTab({
                    url:'/pages/select_model'
                });
                tip.alert('房间已满');
                return;
            }
        }

        // 游戏时间开始倒计时
        start(data){
            this.$broadcast('countDownNum321Events');
            // 把游戏人物id存入缓存
            wepy.setStorageSync(GAME_USER, data);
        }

        // 倒计时结束
        isOverCountDownE(){
            this.stageDataRight.isLight = 1;
            this.readyOrStartBtn = ready_btn;
            this.stageDataCenter.isLight = 1;
            this.hasTimeConfirmBtn = false;
            isReady = true;
            this.$apply();
        }

        // 房主退出,房间取消
        masterOut(){
            if(this.masterOutGaming == 1){
                return;
            }
            this.$invoke('game','masterOutM');
            wx.switchTab({
                url:'/pages/select_model'
            });
        }

        // 房主游戏中退出, 游戏结束组员强制退出
        masterGamingOut(){
            if(this.masterOutGaming == 1){
                this.$invoke('game','masterOutM');
                wx.switchTab({
                    url:'/pages/select_model'
                });
            }
        }

    }
</script>
