// page--粉丝霸榜
<style lang="less">
    page{
        background-color: #f0f0f0;
    }
    .fans-hold-list{

        .fans-list-each{
            border-bottom: 1rpx solid #ccc;

            .energy{
                color:#d34e00;
            }
        }
    }
</style>

<template>
    <view class="w-percent100 fans-hold-list">
        <block wx:if="{{!is_empty}}">
            <!--前三名 start-->
            <view style="margin-top:{{60*px2rpxHeight}}px;">
                <firstthree :firstOfThree.sync="firstOfThree"></firstthree>
            </view>
            <!--前三名 end-->

            <!--剩下名次 start-->
            <view style="width:100%;height:{{790*px2rpxHeight}}px;margin-top:{{30*px2rpxHeight}}px;padding:0 {{45*px2rpxWidth}}px;box-sizing:border-box;background-color: #fff;">
                <scroll-view class="flex-column w-percent100 bgcf" scroll-y="true" bindscrolltolower="scrollToLower">
                        <block wx:for="{{fansList}}" wx:for-item="fans" wx:key="{{fans.id}}">
                            <view class="flex-between fans-list-each" style="width:100%;height:{{100*px2rpxHeight}}px;" data-wallid="{{fans.id}}" @tap.stop="goToVIPWall">
                                <view class="flex-start w-percent50">
                                    <view class="flex-start f24 c6">{{index+4}}</view>
                                    <view class="flex-center br-percent50 o-hidden" style="margin-left:{{45*px2rpxWidth}}px;">
                                        <image src="{{fans.photo}}" lazy-load="true" style="width:{{60*px2rpxWidth}}px;height:{{60*px2rpxWidth}}px;"></image>
                                    </view>
                                    <view class="flex-start f24 c6" style="margin-left:{{45*px2rpxWidth}}px;">{{fans.name}}</view>
                                </view>

                                <view class="flex-end w-percent50">
                                    <image src="{{energy}}" lazy-load="true" style="width:{{21*px2rpxWidth}}px;height:{{26*px2rpxWidth}}px;margin-right:{{15*px2rpxWidth}}px;"></image>
                                    <view class="flex-center f24 energy">{{fans.score}}</view>
                                </view>
                            </view>
                        </block>
                    <!--加载更多时动画-->
                    <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
                </scroll-view>
            </view>
            <!--剩下名次 end-->
        </block>
        <!--暂无数据显示-->
        <placeholder :show.sync="is_empty" message="暂无数据"></placeholder>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import {PX_TO_RPX } from '@/utils/constant';
    import util from '@/utils/util';
    import tip from '@/utils/tip';
    import api from '@/utils/api';
    import imgApi from '@/utils/imgApi';
    import FirstThree from '@/components/first_three';
    import BottomLoadMore from "@/components/common/bottomLoadMore"
    import Placeholder from "@/components/common/placeholder";

    let userId = null;
    let page = 1;
    let pageSize = 20;
    let isLastPage = false;

    export default class MyPage extends wepy.page {
        // 只在Page实例中存在的配置数据，对应于原生的page.json文件
        config = {
            navigationBarTitleText: '粉丝霸榜'
        };

        // 声明页面中所引用的组件，或声明组件中所引用的子组件
        components = {
            firstthree:FirstThree,
            bottomLoadMore: BottomLoadMore,
            placeholder: Placeholder,
        };

        // 页面所需数据均需在这里声明，可用于模板数据绑定
        data = {
            px2rpxWidth:0,
            px2rpxHeight:0,
            energy:imgApi.energy,
            showLoading:false,
            is_empty:true,
            // userId:null,
            firstOfThree:null,
            fansList:null,
        };

        // 在Page和Component共用的生命周期函数
        async onLoad(options){
            let px2rpx = await wepy.getStorageSync(PX_TO_RPX);
            this.px2rpxWidth = px2rpx.px2rpxWidth;
            this.px2rpxHeight = px2rpx.px2rpxHeight;

            if(util.isEmpty(options.userId)){
                tip.error('网络错误');
            } else {
                userId = options.userId;
            }
            this.$apply();
        }

        // 只在Page中存在的页面生命周期函数
        onReady() {
            this.getSPresentWallallEvent();
        };

        methods = {
            // 查看vip墙
            goToVIPWall(e){
                let wallId = e.currentTarget.dataset.wallid;
                wx.navigateTo({
                    url:'/pages/VIP_wall?wallId='+wallId
                });
            },

            // 滚动到底部/右边，会触发 scrolltolower 事件
            scrollToLower(){
                if(isLastPage){
                    tip.toast('这是最后一页了','none');
                    return;
                }
                page++;
                this.getSPresentWallallEvent();
            },
        };

        // 查询私墙排行榜
        async getSPresentWallallEvent(){
            this.showLoading = true;
            this.$apply();
            let fansList = this.fansList;
            if(util.isEmpty(fansList)){
                fansList = [];
            }
            let res = await api.getSPresentWallall({
                query:{
                    userId: userId,
                    page: page,
                    pageSize: pageSize
                }
            });
            if(res.data.state == 1){
                let data = res.data.data.PageInfo;
                let list = data.list;
                isLastPage = data.isLastPage;
                if(util.isEmpty(list[0])){
                    this.is_empty = true;
                } else {
                    this.is_empty = false;
                }
                if(data.isFirstPage){
                    let firstOfThree = [];
                    firstOfThree.push(list[1]);
                    firstOfThree.push(list[0]);
                    firstOfThree.push(list[2]);
                    list.splice(0,3);
                    this.firstOfThree = firstOfThree;
                }
                this.fansList = fansList.concat(list);
            } else {
                tip.error('网络错误');
            }
            this.showLoading = false;
            this.$apply();
        }
    }
</script>

